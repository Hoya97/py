###자료형의 값을 저장하는 공간, 변수
"""
a = 1
b = "python"
c = [1,2,3]
위와 같은 a,b,c를 변수라고 함, 변수를 만들 때는 =(assignmet)기호를 사용
변수명 = 변수에 저장할 값
"""

##변수란?
#변수는 객체를 가리키는 것이라고도 말할 수 있다. 객체란 파이썬에서 사용되는 모든 것을 뜻하는 말
a = 3 #3이라는 값을 가지는 정수 자료형(객체)이 자동으로 메모리에 생성된다 a는 변수의 이름이며, 3이라는 정수형 객체가 저장된 메모리
#위치를 가리키게된다 즉 변수 a는 객체가 저장된 메모리의 위치를 가리키는 레퍼런스(Reference)라고도 할 수 있다.

#type는 입력받은 객체의 자료형이 무엇인지를 알려주는 함수이다.
print(type(3)) # <class 'int'>

a = 3
b = 3
print(a is b) # True # 'is'함수 a와 b가 동일한 객체를 가리키는지 판단
#3이라는 객체를 가리키고 있는 변수의 개수는 2개 이것을 레퍼런스 카운트(Reference Count,참조 개수)라 한다

import sys
print(sys.getrefcount(7)) # 23 #파이썬 내부적으로 7이라는 자료형을 이미 사용했기 때문에 17이 나온다.

print("="*50) #구분선
a = 7
print(sys.getrefcount(7)) # 24

b = 7
print(sys.getrefcount(7)) # 25

c = 7
print(sys.getrefcount(7)) #26 #이후 변수를 늘리면 참조 개수가 증가하는 것을 볼 수 있다.

##변수를 만드는 여러 가지 방법
a, b =('python', 'life') # 튜플로 a,b에 값을 대입할 수 있다.

(a,b) = 'python', 'life' # 튜플은 괄호를 생략해도 된다

[a,b] = ['python', 'life'] # 리스트로 변수를 만들 수도 있다

a = b = 'python' #또한 여러 개의 변수에 같은 값을 대입할 수도 있다.

print("="*50) #구분선

#처음에는 a에 3, b에는 5라는 값이 대입되어 있었지만 a, b = b, a 라는 문장을 수행한 후에 서로 바뀌었다
a = 3
b = 5
a, b = b, a #a와 b의 값을 바꿈
print(a) # 5
print(b) # 3

print("="*50) #구분선

##메모리에 생성된 변수 없애기
#가비지 콜렉션(Grabage collection, 쓰레기 수집)#ex) 3이라는 객체를 가리키고 있는것이 하나도 없을때 3이라는 객체가 메모리에서 삭제
a = 3
b = 3
del(a)
del(b)
#변수 a와 b가 3이라는 객체를 가리켰다가 del이라는 파이썬 내장 함수에 의해 사라진다. 따라서 레퍼런스 카운트가 0이 되어
#정수형 객체 3도 메모리에서 사라지게 된다.
#사용한 변수를 del 명령어를 삭제할 필요 없이 파이썬이 이 모든 것을 자동으로 해준다

##리스트를 변수에 넣고 복사하고자 할 떄
a = [1,2,3]
b = a
a[1] = 4
print(a) # [1, 4, 3]
print(b) # [1, 4, 3]
#b라는 변수에 a가 가리키는 리스트를 대입한 후 a 리스트의 a[1]을 4라는 값으로 바꾸면 a리스트만 바뀌는 것이 아닌 b 리스트도 똑같이
#바뀌는데 이유는 a,b 모두 같은 리스트인 [1,2,3]을 가리키고 있었기 때문이다. a,b는 이름만 다르지 완전히 동일한 리스트를 가리키고
#있는 변수이다

print("="*50) #구분선

#b변수를 생성할때 a와 같은 값을 가지도록 복사해 넣으면서 a가 가리키는 리스트와는 다른 리스트를 가리키게 하는 방법
#[:] 이용
a = [1,2,3]
b = a[:] # a리스트 전체를 복사하여 b에 대입
a[1] = 4
print(a) # [1, 4, 3]
print(b) # [1, 2, 3]
#a 리스트 값을 바꾸더라도 b리스트에는 영향을 주지 않는다.

print("="*50) #구분선

#copy 모듈 이용
from copy import copy
b = copy(a)

print(a) # [1, 4, 3]
print(b) # [1, 4, 3]
print(b is a) #False
#  두 변수가 같은 값을 가지면서 다른 객체를 제대로 생성하는지 확인할때 is 함수를 이용하면 된다
#이 함수는 서로 동일한 객체인지 아닌지에 대한 판단을 해 참과 거짓을 리턴한다
#b is a가 False를 리턴하므로 b와 a가 서로 다른 객체임을 알 수 있다

