###집합 자료형  #집합(set)은 집합에 관련된 것들을 쉽게 처리하기 위해 만들어진 자료형이다
#집합 자료형은 set 키워드를 이용해 만들수 있다
s1 = set([1,2,3])
print(s1) # {1, 2, 3}
#set()의 괄호 안에 리스트를 입력하여 만들거나 문자열을 입력하여 만들 수 있다.
s2 = set("Hello") #{'H', 'e', 'o', 'l'} #중복을 허용하지 않기에 l하나가 빠짐, 순서가 없음
print(s2)

""""""
print("="*100)# 구분선
""""""

##집합 자료형의 특징
"""
중복을 허용하지 않는다.
순서가 없다(Unordered).

set과 딕셔너리같이 순서가 없는 자료형은 인덱싱을 지원하지 않는다
"""
#set 자료형에 저장된 값을 인덱싱으로 접근하려면 리스트나 튜플로 변환한 후에 해야된다
s1 = set([1,2,3])
l1 = list(s1) #리스트로 변환
print(l1) # [1, 2, 3]
print(l1[0]) # 1

t1 = tuple(s1) # 튜플로 변환
print(t1) # (1, 2, 3)
print(t1[1]) # 2

""""""
print("="*100)# 구분선
""""""

##집합 자료형 활용하는 방법
#교집합, 합집합, 차집합 구하기
s1 = set([1,2,3,4,5,6]) #s1은 1~6
s2 = set([4,5,6,7,8,9]) #s2는 4~9

#교집합
print(s1 & s2) # {4, 5, 6} #'&'기호를 사용해 교집합을 구할 수 있다.

print(s1.intersection(s2)) #{4, 5, 6} # intersection함수를 이용해도된다. s1과s2의 위치를 바꿔도 결과값은 같다.

""""""
print("-"*100)# 구분선
""""""

#합집합
print(s1 | s2) # {1, 2, 3, 4, 5, 6, 7, 8, 9} #'|'기호를 이용해 합집합을 만들었다. 중복된 값은 한 개씩만 표현된다.

print(s1.union(s2)) #{ 1, 2, 3, 4, 5, 6, 7, 8, 9} # union합수를 이용해도 된다 intersection함수와 같이 s2union(s1)도 동일하다

""""""
print("-"*100)# 구분선
""""""

#차집합
print(s1 - s2) # {1, 2, 3}
print(s2 - s1) # {8, 9, 7} # 빼기(-)기호를 이용한 방법이다.

print(s1.difference(s2)) # {1, 2, 3}
print(s2.difference(s1)) # {8, 9, 7} # difference 함수를 이용해도된다.

""""""
print("="*100)# 구분선
""""""

##집합 자료형 관련 함수들
#값 1개 추가하기(add)
s1 = set([1,2,3])
s1.add(4)
print(s1) # {1, 2, 3, 4}

""""""
print("-"*100)# 구분선
""""""

#값 여러 개 추가하기(update)
s1 = set([1,2,3])
s1.update([4,5,6])
print(s1) # {1, 2, 3, 4, 5, 6}

""""""
print("-"*100)# 구분선
""""""

#특정 값 제거하기(remove)
s1 = set([1,2,3])
s1.remove(2)
print(s1) #{1, 3}




