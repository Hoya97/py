##리스트 인덱싱
lit = [1,2,3,4,5]
print(lit[0]) # 1   #lit[0]은 리스트의 첫번째 요소값
print(lit[0]+lit[1]) # 3 #리스트 첫번째 요소와 2번째 요소를 더함 (1+2)문자열과 마찬가지로 리스트의 첫번째 요소는 lit[0]
print(lit[-1]) # 5 #리스트의 마지막 요소값

""""""
print("=-="*33) #구분선
""""""

lit2 = [1,2,3,['a','b','c']]
print(lit[0]) # 1
print(lit2[-1]) # ['a', 'b', 'c'] # 리스트의 마지막 요소
print(lit2[3]) # ['a', 'b', 'c'] # 리스트의 네번째 요소

print(lit2[-1][0]) # a #리스트에 포함된 ['a', 'b', 'c']에서 'a'값을 인덱싱을 이용해 꺼내기
print(lit2[3][1]) # b
print(lit2[-1][2]) # c


""""""
print("-=-"*33) # 구분선
""""""

#삼중리스트 인덱싱
lit3 = [1,2,['a','b',['Life','is']]]
print(lit3[2][2][0]) # Life
print(lit3[2][2][1]) # is

""""""
print("-=-"*33) # 구분선
""""""

##리스트의 슬라이싱

lis = [1,2,3,4,5]
print(lis[0:2]) # [1, 2] #리스트의 슬라이싱
aa = "12345"
print(aa[0:2]) #12 #문자열의 슬라이싱 #리스트 슬라이싱과 문자열 슬라이싱 사용법이 동일

a1 = [1,2,3,4,5]
a2 = a1[:2] #리스트 a1의 처음요소부터 2번째요소인 a1[2]까지 나타내는 리스트. a1[2]값인 3은 포함되지 않는다.
a3 = a1[2:] #리스트 a1의 세번째 요소부터 끝까지 나타내는 리스트
print(a2) # [1, 2]
print(a3) # [3, 4, 5]

#중첩된 리스트에서 슬라이싱
aaa = [1,2,3,['a','b','c'],4,5]
print(aaa[2:5]) # [3, ['a', 'b', 'c'], 4] #aaa[2]부터 aaa[4]까지
print(aaa[3][:2]) # ['a', 'b']
""" aaa[3]은 ['a','b','c']를 나타냄 aaa[3][:2]는 ['a', 'b', 'c']의 첫번째 요소부터
세번째 요소 직전까지 값인 ['a', 'b']를 나타내는 리스트가 된다"""

""""""
print("="*100) #구분선
""""""

##리스트 연산자
#리스트 더하기(+)
x1 = [1,2,3]
x2 = [4,5,6]
print(x1 + x2) # [1, 2, 3, 4, 5, 6] #리스트 사이에 + 기호는 2개의 리스트를 합치는 기능을 함

#리스트 반복하기(*)
y1 = [1,2,3]
print(y1 * 3) # [1, 2, 3, 1, 2, 3, 1, 2, 3] # [1, 2, 3]리스트가 세번 반복됨

#리스트 연산 오류 (문자열로 변환) str()
xx = [1,2,3]
#xx[2]+"hi"
# #오류발생 #xx[2]에 저장된 값은 정수 3인데 "hi"는 문자열이다 정수와 문자열은 더할수 없기에 오류가 발생함

print(str(xx[2])+"hi") # 3hi # str()은 정수나 실수를 문자열의 형태로 바꿔주는 파이썬의 내장 함수

""""""
print("="*100) #구분선
""""""

##리스트의 수정, 변경과 삭제

#리스트에서 하나의 값 수정
ㅁ = [1,2,3]
ㅁ[2] = 4
print(ㅁ) # [1, 2, 4] # ㅁ[2]의 요소값 3이 4로 바뀜

#리스트에서 연속된 범위의 값 수정
ㅁㅁ = [1,2,3]
#ㅁㅁ[1:2] >>>[2]
ㅁㅁ[1:2] = ['a','b','c']
print(ㅁㅁ) # [1, 'a', 'b', 'c', 3]
""" 
ㅁㅁ[1:2]는 ㅁㅁ[1]부터 ㅁㅁ[2]까지를 말하나 ㅁㅁ[2]는 포함하지 않으므로 ㅁㅁ[1]값인 2를 의미한다 리스트에서 2값 대신
['a','b','c']값이 대입됨
"""

#리스트 수정시 주의점
"""리스트를 a[1:2] = ['a','b','c']로 수정하는 것과 a[1] = ['a','b','c']로 수정하는 것은 다른 결과값을 갖게 되므로 주의
a[1] = ['a','b','c']는 리스트 a의 두번째 요소를 ['a','b','c']로 바꾼다는 말이고 a[1:2]는 a[1]에서 a[2] 사이 리스트를 
['a','b','c']로 바꾼다는 말이다 따라서 a[1] = ['a','b','c']로 수정하게 되면 리스트 a가 [1,['a','b','c'],4]라는 값으로 변하게됨
"""
ㅁㅁㅁ = [1,2,3]
ㅁㅁㅁ[1] = ['a','b','c']
print(ㅁㅁㅁ) # [1, ['a', 'b', 'c'], 3]

#[]사용해 리스트 요소 삭제하기
ㅁㅁ[1:3] = []
print(ㅁㅁ) # [1, 'c', 3]
""" 리스트 ㅁㅁ의 값은 [1, 'a', 'b', 'c', 3]였다 여기서 ㅁㅁ[1:3]은 ㅁㅁ의 인덱스 1부터 3까지 (1<=ㅁㅁ<3),즉 ㅁㅁ[1],ㅁㅁ[2]를
의미하므로 ㅁㅁ[1:3]은 ['a','b']가됨 ㅁㅁ[1:3]을 []로 바꿔줬기때문에 ['a','b']가 삭제된 [1, 'c', 3]가 된다. 
"""

print("="*100) #구분선

#del 함수 사용해 리스트 요소 삭제하기
print(ㅁㅁ) # [1, 'c', 3]
del ㅁㅁ[1] #ㅁㅁ[1]인 'c'를 삭제
print(ㅁㅁ) # [1, 3]
""" del ㅁㅁ[x]는 x번째 요소값을 삭제한다. del ㅁㅁ[x:y]는 x번째부터 y번째 요소 사이 값을 삭제한다
여ㅣ서는 ㅁㅁ 리스트에서 ㅁㅁ[1]인 'c'를 삭제했다     
del 함수는 파이썬이 자체적으로 가지고 있는 삭제 함수이며 (del 객체)와 같이 사용한다 
객체란 파이썬에서 사용되는 모든 자료형을 말한다
"""

""""""
print("="*100) #구분선
""""""

##리스트 관련 함수들
#리스트에 요소 추가 (append) append는 덧붙이다 첨부하다 라는 뜻이다
#append(x)는 리스트의 맨 마지막에 x를 추가시키는 함수이다
a = [1,2,3]
a.append(4) # 리스트 맨 마지막에 4를 추가
print(a) # [1, 2, 3, 4]
#리스트 안에는 어떤 자료형도 추가할 수 있다
a.append([5,6]) # 리스트 맨 마지막에 []
print(a) # [1, 2, 3, 4, [5, 6]]

""""""
print("="*100) #구분선
""""""

#리스트 정렬(sort) sort 함수는 리스트의 요소르 순서대로 정렬해 준다.
a = [1,4,3,2]
a.sort()
print(a) # [1, 2, 3, 4]

#알파뱃 순서도 정렬 가능
a = ['a','c','b']
a.sort()
print(a) # ['a', 'b', 'c']

""""""
print("="*100) #구분선
""""""

#리스트 뒤집기 (reverse) reverse 함수는 리스트를 역순으로 뒤집어 준다. 현재의 리스트를 그대로 거꾸로 뒤집는다
a = ['a','c','b']
a.reverse()
print(a) # ['b', 'c', 'a']

""""""
print("="*100) #구분선
""""""

#위치 반환 (index) index(x) 함수는 리스트에 x라는 값이 있으면 x의 위치값을 리턴함
a = [1,2,3]
print(a.index(3)) # 2 #3은 리스트 a의 세번째 (a[2]) 요소
print(a.index(1)) # 0 #1은 리스트 a의 첫번째 (a[0]) 요소
#리스트에 없는 값을 입력시 값 오류(ValueError) 발생

""""""
print("="*100) #구분선
""""""

#리스트에 요소 삽입(insert) insert(a,b)는 리스트의 a번째 위치에 b를 삽입하는 함수
#파이썬은 숫자를 0부터 센다
a = [1,2,3]
a.insert(0,4) #a[0] 위치에 4 삽입
print(a) # [4, 1, 2, 3] #0번째 자리 ,즉 첫번째 요소(a[0])위치에 4라는 값을 삽입

a.insert(3,5) #a[3] 위치에 5 삽입
print(a) # [4, 1, 2, 5, 3]

""""""
print("="*100) #구분선
""""""

#리스트 요소 제거(remove) remove(x)는 리스트에서 첫 번째로 나오는 x를 삭제하는 함수이다
a = [1,2,3,1,2,3,]
a.remove(3)
print(a) # [1, 2, 1, 2, 3] #a가 3이라는 값을 2개 가지고있을때 첫번째 3만 제거된다
a.remove(3)
print(a) # [1, 2, 1, 2] # a.remove(3)을 한번 더 실행하면 다시 3이 삭제된다

""""""
print("="*100) #구분선
""""""

#리스트 요소 끄집어내기 (pop)
#pop()은 리스트 맨 마지막 요소를 돌려주고 그 요소는 삭제하는 함수이다

a = [1,2,3]
a.pop()
print(a) # [1, 2] # a리스트 [1, 2, 3]에서 3을 끄집어내고 최종적으로 [1, 2]만 남는다

#pop(x)는 리스트의 x번째 요소를 돌려주고 그 요소는 삭제한다.
a = [1,2,3]
print(a.pop(1)) # 2
print(a) # [1, 3]
#a.pop(1)은 a[1]의 값을 끄집어낸다. 다시 a를 출력해 보면 끄집어낸 값이 삭제된 것을 확인 가능하다.

""""""
print("="*100) #구분선
""""""

#리스트에 포함된 요소 x의 개수 세기(count)
#count(x)는 리스트 내의 x가 몇개 있는지 조사해 그 개수를 돌려주는 함수이다
a = [1,2,3,1]
print(a.count(1)) # 2 #1이라는 값이 리스트 a에 2개 들었으므로 2를 돌려준다

""""""
print("="*100) #구분선
""""""

#리스트 확장(extend)
#extend(x)에서 x에는 리스트만 올 수 있으며 원래의 a 리스트에 x 리스트를 더하게된다

a = [1,2,3]
a.extend([4,5]) #a 리스트에 리스트 [4,5]를 추가
print(a) # [1, 2, 3, 4, 5]

b = [6,7]
a.extend(b) #a 리스트에 리스트 b를 추가
print(a) # [1, 2, 3, 4, 5, 6, 7]
#a.extend([4,5])는 a += [4,5]와 동일, a +=[4,5]는 a=a+[4,5]와 같은 표현이다
