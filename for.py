#for문
#전형적인 for문
test_list = ['one','two','three']
for i in test_list: #one,two,three를 순서대로 i에 대입
    print(i)

"""
one
two
three
"""

print("*"*77)
#다양한 for문의 사용
a = [(1,2),(3,4),(5,6)]
for (first, last) in a:
    print(first+ last)

"""
3   #first:1 , last:2
7   #first:3,  last:4
11  #first:5 , last:6
"""

print("*"*77)

#for문 응용
"""총 5명 학생이 시험을 보았는데 시험 점수가 60점 넘으면 합격 그렇지않으면 불합격,결과를 보여주시오"""
scores = [90,20,67,43,77] #학생 점수리스트
number = 0 #핵생에게 붙여 줄 번호
for score in scores: #90,20,67,43,77 순서대로 score에 삽입
    number = number+1
    if score >= 60:
        print("축하합니다. %d번 학생은 합격입니다." % number)
    else:
        print("안타깝게도 %d번 학생은 불합격입니다." % number)

"""
축하합니다. 1번 학생은 합격입니다.
안타깝게도 2번 학생은 불합격입니다.
축하합니다. 3번 학생은 합격입니다.
안타깝게도 4번 학생은 불합격입니다.
축하합니다. 5번 학생은 합격입니다.
"""

#for문과 continue

print("*"*77)

scores = [23,77,67,43,37] #학생 점수리스트
number = 0 #핵생에게 붙여 줄 번호
for score in scores:
    number = number+1
    if score < 60: continue
    print("축하합니다. %d번 학생은 합격입니다." % number)

"""
축하합니다. 1번 학생은 합격입니다.
축하합니다. 4번 학생은 합격입니다.
축하합니다. 5번 학생은 합격입니다.
"""

range(0, 10)
#for와 함께 자주 사용하는 range함수
#숫자리스트를 자동으로 만들어주는 range 함수와 자주 사용됨
a = range(10)
print(a)
#range(0, 10) #0,1,2,3,4,5,6,7,8,9
#range(0, 10)은 0부터 10미만의 숫자를 포함하는 range객체를 만들어 준다
#시작과 끝 숫자를 지정하려면 range(시작숫자,끝숫자)형태를 사용하는데 이때 끝나는 숫자는 포함되지 않는다.

print("*"*77)

#range 함수 예시
sum = 0
for i in range(1,11):
    sum = sum + i

print(sum)
"""
range(1,11)은 숫자 1부터 10까지 (1이상 11미만)의 숫자를 데이터로 갖는 객체이다 따라서 위의 예에서 i 변수에
리스트의 숫자들이 1부터 10까지 하나씩 차례로 대입되면서 sum = sum + i을 반복 수행하고 sum은 최종적으로 55가
된다."""

print("*"*77)

marks = [90,20,67,43,77]
for number in range(len(marks)):
    if marks[number] < 60: continue #점수가 60점 미만일시 맨처음으로 돌아감
    print("축하합니다. %d번 학생은 합격입니다." % (number+1))

print("*"*77)

"""
축하합니다. 1번 학생은 합격입니다.
축하합니다. 3번 학생은 합격입니다.
축하합니다. 5번 학생은 합격입니다.
"""
"""
len함수는 리스트 내 요소의 개수를 돌려주는 함수이다 따라서 len(marks)는 5가 될것이고 range(len(marks))는
range(5)가 될것이다. number변수에는 차례로 0 부터 4까지의 숫자라 대입되고 marks[number]는 차례대로 90,20,67,43,77
이라는 값을 갖게된다.
"""

#for와 range를 이용한 구구단
for i in range(2,10):
    for j in range(1,10):
        print(i*j, end=" ")
    print('')

"""
2 4 6 8 10 12 14 16 18 
3 6 9 12 15 18 21 24 27 
4 8 12 16 20 24 28 32 36 
5 10 15 20 25 30 35 40 45 
6 12 18 24 30 36 42 48 54 
7 14 21 28 35 42 49 56 63 
8 16 24 32 40 48 56 64 72 
9 18 27 36 45 54 63 72 81 
"""
"""
end를 넣어준 이유는 해당 결과값을 출력할 때 다음줄로 넘기지 않고 그줄에서 계속해서 출력 
그 다음 print('')는 2단 3단등을 구분하기 위해 두번째 for문이 끝나면 결과값을 다음줄로 출력하게 해주는 
문장이다."""

print("*"*77)

#리스트 안에 for문 포함하기
#리스트안에 for문을 포함하는 리스트 내포(List comprehension)를 이용하면 좀 더 편리하고 직관적인 프로그램을
#만들수 있다
a = [1,2,3,4]
result = []
for num in a:
    result.append(num*3)

print(result)
#[3, 6, 9, 12]
#위 예저는 a라는 리스트의 각 항목에 3을 곱한 결과를 result라는 리스트에 담는 예제
print("*"*77)
#이것을 리스트 내포를 이용하면 간단히 해결할수있다
result = [num*3 for num in a]
print(result)

print("*"*77)###
#만약 짝수에만 3을 곱하여 담고 싶다면 다음과 같이 'if조건'을 사용할 수 있다.
result=[num * 3 for num in a if num % 2 == 0]
print(result)
#[6, 12]

#리스트 내포의 일반적인 문법은 다음과 같다. if 조건 부분은 생략할 수 있다.
#[표현식 for 항목 in 반복 가능 객체 if 조건]

#for문을 2개 이상 사용하는것도 가능
""""[표현식 for 항목1 in 반복 가능 객체1 if 조건1
    for 항목2 in 반복 가능 객체2 if 조건2
    ...
    for 항목n in 반복 가능 객체n if 조건n]"""
print("*"*77)###
#구구단의 모든 결과를 리스트에 담고 싶다면 리스트 내포를 이용해 구현할 수 있다.
result = [x*y for x in range(2,10)
          for y in range(1,10)]
print(result)
"""
[2, 4, 6, 8, 10, 12, 14, 16, 18, 3, 6, 9, 12, 15, 18, 21, 24, 27, 4, 8, 12, 16, 20, 24,
28, 32, 36, 5, 10, 15, 20, 25, 30, 35, 40, 45, 6, 12, 18, 24, 30, 36, 42, 48, 54, 7, 
14, 21, 28, 35, 42, 49, 56, 63, 8, 16, 24, 32, 40, 48, 56, 64, 72, 9, 18, 27, 36, 45, 54,
63, 72, 81] 
"""
